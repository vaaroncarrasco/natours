.row {
    max-width: $grid-width; // standar -> 1140px of max width to keep grid centered on wider screens 1140px / rem = 10px -> 114rem
    margin: 0 auto; // center block elements inside of another block elements -> top/bot = 0 -> left=right -> auto -> calculated to be the same

    // .row:last-child() -> selects the last child
    &:not(:last-child) { // &:not(:last-child) -> selects everything but not the last-child
        margin-bottom: $gutter-vertical; // set margin bottom in all except last child
    }

    // .row::after {}
    @include clearfix;

    [class^="col-"] { // ^= we want all the classes with this "beginning" / ^ -> start with "col-"||* contains all, exactly this "col-1-of-2"||$="-2" ends with
        float: left; // float left all childs

        &:not(:last-child) {
            margin-right: $gutter-horizontal; // all margins only on the right but not the last child -> keeping spaces in between
        }
    }

    // calc with native function cause it works with the rendered layout values


    .col-1-of-2 { width: calc((100% - #{$gutter-horizontal}) / 2); }

    .col-1-of-3 { width: calc((100% - 2 * #{$gutter-horizontal}) / 3); }

    .col-2-of-3 { width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal}); }

    .col-1-of-4 { width: calc((100% - 3 * #{$gutter-horizontal}) / 4); }

    .col-2-of-4 { width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal}); }

    .col-3-of-4 { width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal}); }
}
